parameters:
  language: ''

jobs:
  - job: Analysis
    pool:
      name: 00-OSIManaged-Test
      demands: USERNAME -equals $(covAgent)
    steps:
      - script: if not exist $(covFolder) mkdir $(covFolder)
        workingDirectory: $(Build.SourcesDirectory)$(projPath)
        displayName: 'Coverity: Make dir'
        continueOnError: true

      # DotNet
      - script: |
          dotnet clean
          '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../'
        workingDirectory: '$(Build.SourcesDirectory)$(projPath)/$(covFolder)'
        displayName: 'Coverity: Build DotNet'
        condition: eq(${{ parameters.language }}, 'dotnet')

      # Java
      - script: |
          mvn clean
          '"$(covPath)cov-build" --dir $(covFolder) mvn compile'
        workingDirectory: '$(Build.SourcesDirectory)$(projPath)'
        displayName: 'Coverity: Build Java'
        condition: eq(${{ parameters.language }}, 'java')

      # Default
      - script: '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../'
        workingDirectory: '$(Build.SourcesDirectory)$(projPath)/$(covFolder)'
        displayName: 'Coverity: Build'
        condition: and(ne(${{ parameters.language }}, 'dotnet'), ne(${{ parameters.language }}, 'java'))

      - script: '"$(covPath)cov-analyze" --dir .'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)
        displayName: 'Coverity: Analyze'

      - script: '"$(covPath)cov-commit-defects" --stream "Engineering Incubation - $(covStream)" --host $(covServer) --https-port 8443 --auth-key-file "$(covAuthPath)" --dir .'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)
        displayName: 'Coverity: Upload'

      # DotNet
      - script: |
          dotnet restore
          dotnet msbuild -p:HIGHENTROPYVA=true
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Synopsis: Build DotNet'
        condition: eq(${{ parameters.language }}, 'dotnet')

      # Java
      # TODO

      # Python
      # TODO

      # NodeJS
      # TODO

      - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
        inputs:
          Products: BD
          BlackDuckService: 'product-readiness.BlackDuck'
          DetectArguments: |
            --detect.project.name="product-readiness.$(bdProject)"
            --detect.project.version.name="$(Build.SourceBranchName)"
            --detect.source.path=$(Build.SourcesDirectory)
            --detect.code.location.name="code_location_$(bdProject)_$(Build.SourceBranchName)"
            --detect.bom.aggregate.name="bom_$(bdProject)_$(Build.SourceBranchName)"
        condition: succeeded()
        displayName: 'Synopsys: Detect'
