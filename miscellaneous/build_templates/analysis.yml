parameters:
  language: ''
  web: false

jobs:
  - job: Analysis
    pool:
      name: 00-OSIManaged-Test
      demands: USERNAME -equals $(buildAgent)
    steps:
      # Coverity
      - script: if not exist $(covFolder) mkdir $(covFolder)
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Coverity: Make dir'
        continueOnError: true

      # - DotNet
      - script: |
          echo Dir
          dir
          echo Clean
          dotnet clean
          echo Restore
          dotnet restore --ignore-failed-sources
          echo Build
          "$(covPath)cov-build" --dir $(covFolder) dotnet build --ignore-failed-sources
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Coverity: Build DotNet'
        condition: eq('${{ parameters.language }}', 'dotnet')

      # - Java
      - script: |
          mvn clean
          "$(covPath)cov-build" --dir $(covFolder) mvn compile
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Coverity: Build Java'
        condition: eq('${{ parameters.language }}', 'java')

      # - Default
      - script: '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)/
        displayName: 'Coverity: Build'
        condition: or(and(ne('${{ parameters.language }}', 'dotnet'), ne('${{ parameters.language }}', 'java')), eq(${{ parameters.web }}, true))

      - script: '"$(covPath)cov-analyze" --dir .'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)/
        displayName: 'Coverity: Analyze'

      - script: '"$(covPath)cov-commit-defects" --stream "Engineering Incubation - $(covStream)" --host $(covServer) --https-port 8443 --auth-key-file "$(covAuthPath)" --dir .'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)/
        displayName: 'Coverity: Upload'

      # Synopsys
      # - DotNet
      - script: |
          dotnet restore
          dotnet msbuild -p:HIGHENTROPYVA=true
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Synopsys (DotNet): Build'
        condition: eq('${{ parameters.language }}', 'dotnet')

      # - Java
      - script: mvn install -f pom.xml
        workingDirectory: $(Build.SourcesDirectory)$(libPath)/
        displayName: 'Synopsys (Java): Maven install library'
        condition: eq('${{ parameters.language }}', 'java')
      - task: Maven@3
        inputs:
          mavenPomFile: '$(Build.SourcesDirectory)$(projPath)/pom.xml'
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          goals: package
        displayName: 'Synopsys (Java): Build'
        condition: eq('${{ parameters.language }}', 'java')

      # - Python
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.6'
          architecture: 'x86'
        displayName: 'Synopsys (Python): Specify Python version'
        condition: eq('${{ parameters.language }}', 'python')
      - script: |
          pip install setuptools wheel
          pip install unittest-xml-reporting    
          pip install pytest
          pip install pytest-cov
          pip install -r requirements.txt
        workingDirectory: $(Build.SourcesDirectory)$(testPath)/
        displayName: 'Synopsys (Python): Install dependencies'
        condition: eq('${{ parameters.language }}', 'python')

      # - Angular
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Synopsys (Angular): Specify Node version'
        condition: eq('${{ parameters.language }}', 'angular')
      - script: |
          npm install -g @angular/cli
          npm ci
          npm run build
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Synopsys (Angular): Build'
        condition: eq('${{ parameters.language }}', 'angular')

      # - NodeJS
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Synopsys (NodeJS): Specify Node version'
        condition: eq('${{ parameters.language }}', 'nodejs')
      - script: npm ci
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Synopsys (NodeJS): Install dependencies'
        condition: eq('${{ parameters.language }}', 'nodejs')

      - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
        inputs:
          Products: BD
          BlackDuckService: 'product-readiness.BlackDuck'
          DetectArguments: |
            --detect.project.name="product-readiness.$(bdProject)"
            --detect.project.version.name="$(Build.SourceBranchName)"
            --detect.source.path=$(Build.SourcesDirectory)
            --detect.code.location.name="code_location_$(bdProject)_$(Build.SourceBranchName)"
            --detect.bom.aggregate.name="bom_$(bdProject)_$(Build.SourceBranchName)"
        condition: succeeded()
        displayName: 'Synopsys: Detect'
