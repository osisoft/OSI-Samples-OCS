trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - basic_samples/Authentication/ClientCredentialFlow/DotNet

pr:
  branches:
    include:
      - master
  paths:
    include:
      - basic_samples/Authentication/ClientCredentialFlow/DotNet

variables:
  - group: LocalServer
  - name: projpath
    value: /basic_samples/Authentication/ClientCredentialFlow/DotNet/ClientCredentialFlow
  - name: CredFile
    value: appsettings.json
  - name: CredFileLibrary
    value: product-readiness.auth_cc_dotnet.json
  - name: testpath
    value: /basic_samples/Authentication/ClientCredentialFlow/DotNet/ClientCredentialFlowTest
  - name: repo
    value: Auth_CC_DotNet

jobs:
  - job: Tests

    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-16.04'
        windows:
          imageName: 'vs2017-win2016'

    pool:
      vmImage: $(imageName)
    steps:
      # Download Secure File
      # Download a secure file to a temporary location on the build or release agent
      - task: DownloadSecureFile@1
        inputs:
          secureFile: $(CredFileLibrary)
        displayName: 'Download library config file'

      # Copy Files
      # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
      - task: CopyFiles@2
        inputs:
          sourceFolder: $(Agent.TempDirectory)
          contents: $(CredFileLibrary)
          targetFolder: '$(Build.SourcesDirectory)$(projpath)/'
          #cleanTargetFolder: false # Optional
          overWrite: true # Optional
          #flattenFolders: false # Optional
        displayName: 'Copy library config file'

      - bash: rm $(CredFile)
        workingDirectory: $(Build.SourcesDirectory)$(projpath)/
        displayName: 'Delete default config file'

      - bash: mv $(CredFileLibrary) $(CredFile)
        workingDirectory: $(Build.SourcesDirectory)$(projpath)/
        displayName: 'Rename library config file'

      - script: |
          dotnet restore
          dotnet msbuild -p:HIGHENTROPYVA=true
        workingDirectory: $(Build.SourcesDirectory)$(projpath)/
        displayName: 'Build app'

      - script: |
          dotnet restore
          dotnet msbuild -p:HIGHENTROPYVA=true
          dotnet test
        workingDirectory: $(Build.SourcesDirectory)$(testpath)/
        displayName: 'Run test'

  - job: Coverity

    pool:
      name: 00-OSIManaged-Test
      demands: USERNAME -equals $(LocalServer)

    steps:
      - script: 'if not exist $(covFolder) mkdir $(covFolder)'
        workingDirectory: '$(Build.SourcesDirectory)$(projpath)'
        displayName: 'Make dir'
        continueOnError: true

      - script: '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../ '
        workingDirectory: '$(Build.SourcesDirectory)$(projpath)/$(covFolder)'
        displayName: 'Build'

      - script: '"$(covPath)cov-analyze" --dir . '
        workingDirectory: '$(Build.SourcesDirectory)$(projpath)/$(covFolder)'
        displayName: 'Analyze'

      - script: '"$(covPath)cov-commit-defects" --stream "Engineering Incubation - $(repo)" --host $(coverity_server) --https-port 8443 --auth-key-file "$(covAuthPath)" --dir . '
        workingDirectory: '$(Build.SourcesDirectory)$(projpath)/$(covFolder)'
        displayName: 'Upload'

  - job: BinSkim

    pool:
      name: Hosted VS2017

    steps:
      - script: |
          dotnet restore
          dotnet msbuild -p:HIGHENTROPYVA=true
        workingDirectory: $(Build.SourcesDirectory)$(projpath)
        displayName: 'Build'

      - task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-binskim.BinSkim@3
        displayName: 'Analyze'
        inputs:
          AnalyzeTarget: '$(Build.SourcesDirectory)\*.dll;$(Build.SourcesDirectory)\*.exe'

  - job: Synopsis

    pool:
      name: Hosted VS2017
      demands:
        - maven
        - npm

    steps:
      - task: JavaToolInstaller@0
        displayName: 'Use Java 1.8'
        inputs:
          versionSpec: 1.8
          jdkArchitectureOption: x64
          jdkSourceOption: AzureStorage
          azureResourceManagerEndpoint: engineering.CyberSecurity.Java
          azureStorageAccountName: java4osisoft
          azureContainerName: ' jdk1-8-0-181'
          azureCommonVirtualFile: 'server-jre-8u181-windows-x64.tar.gz'
          jdkDestinationDirectory: 'c:\Java'

      - powershell: |
          Write-Host "JAVA_HOME\bin: ${env:JAVA_HOME}\bin"
          Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};${env:JAVA_HOME}\bin"
        displayName: 'Path += JAVA_HOME\bin'

      - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
        displayName: 'Synopsis Detect'
        inputs:
          Products: BD
          BlackDuckService: 'Black Duck'
          DetectArguments: |
            --detect.project.name="$(repo)"
            --detect.project.version.name="latest"
            --detect.source.path="$(build.sourcesDirectory)$(projpath)"
            --detect.code.location.name="code_location_$(repo)_latest_$(repo)"
            --detect.bom.aggregate.name="bom_$(repo)_latest_$(repo)"
